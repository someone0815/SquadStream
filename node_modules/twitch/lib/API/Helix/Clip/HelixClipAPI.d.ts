import BaseAPI from '../../BaseAPI';
import HelixClip, { HelixClipData } from './HelixClip';
import HelixPaginatedRequest from '../HelixPaginatedRequest';
/** @private */
export declare type HelixClipFilterType = 'broadcaster_id' | 'game_id' | 'id';
export interface HelixClipFilter {
    startDate?: string;
    endDate?: string;
}
/** @private */
export interface HelixClipIdFilter extends HelixClipFilter {
    filterType: HelixClipFilterType;
    ids: string | string[];
}
/**
 * Parameters for creating a clip.
 */
export interface HelixClipCreateParams {
    /**
     * The ID of the broadcaster of which you want to create a clip.
     */
    channelId: string;
    /**
     * Add a delay before the clip creation that accounts for the usual delay in the viewing experience.
     */
    createAfterDelay?: boolean;
}
/** @private */
export interface HelixClipCreateResponse {
    id: string;
    edit_url: string;
}
/**
 * The Helix API methods that deal with clips.
 *
 * Can be accessed using `client.helix.clips` on a {@TwitchClient} instance.
 *
 * ## Example
 * ```ts
 * const client = await TwitchClient.withCredentials(clientId, accessToken);
 * const clipId = await client.helix.clips.createClip({ channelId: '125328655' });
 * ```
 */
export default class HelixClipAPI extends BaseAPI {
    /**
     * Retrieves the latest clips for the specified broadcaster.
     *
     * @param id The broadcaster's user ID.
     * @param filter Additional filters.
     */
    getClipsForBroadcaster(id: string, filter?: HelixClipFilter): HelixPaginatedRequest<HelixClipData, HelixClip>;
    /**
     * Retrieves the latest clips for the specified game.
     *
     * @param id The game ID.
     * @param filter Additional filters.
     */
    getClipsForGame(id: string, filter?: HelixClipFilter): HelixPaginatedRequest<HelixClipData, HelixClip>;
    /**
     * Retrieves the clips identified by the given IDs.
     *
     * @param ids The clip IDs.
     */
    getClipsByIds(ids: string[]): HelixPaginatedRequest<HelixClipData, HelixClip>;
    /**
     * Retrieves the clip identified by the given ID.
     *
     * @param id The clip ID.
     */
    getClipById(id: string): Promise<HelixClip | null>;
    /**
     * Creates a clip of a running stream.
     *
     * Returns the ID of the clip.
     *
     * @expandParams
     */
    createClip(params: HelixClipCreateParams): Promise<string>;
    private _getClips;
}
