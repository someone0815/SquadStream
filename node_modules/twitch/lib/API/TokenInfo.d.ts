/** @private */
export interface TokenAuthorization {
    scopes: string[];
    created_at: string[];
    updated_at: string[];
}
/** @private */
export declare type TokenStructure = {
    valid: true;
    authorization: TokenAuthorization;
    user_name: string;
    user_id: string;
    client_id: string;
    expires_in?: number;
} | {
    valid: false;
    authorization: null;
};
/** @private */
export interface TokenInfoData {
    token: TokenStructure;
}
/**
 * Information about an access token.
 */
export default class TokenInfo {
    private readonly _data;
    private readonly _obtainmentDate;
    /** @private */
    constructor(_data: TokenStructure);
    /**
     * The client ID.
     */
    readonly clientId: string | null;
    /**
     * The ID of the authenticated user.
     */
    readonly userId: string | null;
    /**
     * The user name of the authenticated user.
     */
    readonly userName: string | null;
    /**
     * The scopes for which this token is valid.
     */
    readonly scopes: string[];
    /**
     * Whether the token is valid or not.
     */
    readonly valid: boolean;
    /**
     * The time when the token will expire.
     *
     * If this returns null, it means that the token is either invalid or never expires (happens with old client IDs).
     */
    readonly expiryDate: Date | null;
}
